- name: "Generate dictionary ACL for {{inventory_hostname}}"
  local_action: "shell python3 ../src/main.py generate_ansible_iptables_acls_array {{inventory_hostname}}"
  register: result

- name: Set fact acls_dict_for_ansible
  set_fact:
    acls_dict_for_ansible: "{{ acls_dict_for_ansible | combine({inventory_hostname: result.stdout}) }}"

- name: Set fact acls_dict_for_ansible_current_inventory_hostname
  set_fact:
    current_inventory_hostname: "{{acls_dict_for_ansible[inventory_hostname]}}"

- name: Get existing iptables all rules from filter table
  ansible.builtin.shell:
    cmd: iptables -L -n
  changed_when: false
  register: filter_iptables_rules

- name: Get network interface 
  ansible.builtin.shell: 
    cmd: ip -br link show | awk '{print $1}' | sed -n '3p' 
  changed_when: false
  register: ip_interfaces

- name: Set fact network interface
  set_fact:
    network_interface: "{{ip_interfaces.stdout}}"

- name: Set the policy for the INPUT chain to ACCEPT
  ansible.builtin.iptables:
    chain: INPUT
    policy: ACCEPT

- name: Flush INPUT chain
  ansible.builtin.iptables:
    chain: INPUT
    flush: true

- name: Flush DOCKER-USER chain
  ansible.builtin.iptables:
    chain: DOCKER-USER
    flush: true
  when: "'DOCKER-USER' in filter_iptables_rules.stdout"

# - name: Allow icmp type 8 echo requests
#   ansible.builtin.iptables:
#     chain: INPUT
#     protocol: icmp
#     icmp_type: "{{ item }}"
#     jump: ACCEPT
#     comment: "Allow icmp type {{ item }} echo requests"
#   with_items: [ "3", "4", "8", "11" ]

- name: Accept iptables rules for DOCKER-USER chain
  ansible.builtin.shell: 
    cmd: "iptables -I DOCKER-USER -i {{network_interface}} -s {{item.source_address | default('0.0.0.0/0')}} -p {{item.service_protocol | default('all')}} -m conntrack --ctorigdstport {{item.service_destination_port}} -j ACCEPT -m comment --comment '{{item.full_comment | default('#')}}'"
  with_items: "{{ current_inventory_hostname.data.docker.accept | default([])}}"
  when:
    - current_inventory_hostname.success
    - "'service_destination_port' in item and item.service_destination_port"
    - "'DOCKER-USER' in filter_iptables_rules.stdout"
      #- "{{item.service_in_docker | default(false)}}"

- name: Drop iptables rules for DOCKER-USER chain
  ansible.builtin.shell: 
    cmd: "iptables -A DOCKER-USER -i {{network_interface}} -p {{item.service_protocol | default('all')}} -m conntrack --ctorigdstport {{item.service_destination_port}} -j DROP"
  with_items: "{{ current_inventory_hostname.data.docker.drop }}"
  when:
    - current_inventory_hostname.success
    - "'service_destination_port' in item and item.service_destination_port"
    - "'DOCKER-USER' in filter_iptables_rules.stdout"
      #- item.service_in_docker

- name: Append RETURN rule into DOCKER-USER chain
  ansible.builtin.iptables:
    chain: DOCKER-USER
    jump: RETURN
  when:
    - current_inventory_hostname.success
    - "'DOCKER-USER' in filter_iptables_rules.stdout"

- name: Allow related and established connections for INPUT chain
  ansible.builtin.iptables:
    chain: INPUT
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT

- name: Accept iptables rules for INPUT chain
  ansible.builtin.iptables:
    chain: INPUT
    protocol: "{{item.service_protocol | default(omit)}}"
    source: "{{item.source_address | default(omit)}}"
    destination: "{{ item.service_destination_ip | default(item.ip) }}"
    destination_port: "{{item.service_destination_port | default(omit) }}"
    jump: ACCEPT
    comment: "{{item.full_comment}}"
  with_items: "{{ current_inventory_hostname.data.input.accept }}"
  when: 
    - current_inventory_hostname.success
    - "'service_in_docker' not in item or not item.service_in_docker"

- name: Accept interface docker_gwbridge rule for INPUT chain
  ansible.builtin.iptables:
    chain: INPUT
    in_interface: docker_gwbridge
    jump: ACCEPT
  when:
    - current_inventory_hostname.success
    - "'DOCKER-USER' in filter_iptables_rules.stdout"

- name: Set the policy for the INPUT chain to DROP
  ansible.builtin.iptables:
    chain: INPUT
    policy: DROP
  when: current_inventory_hostname.success

## - name: Set the policy for the FORWARD chain to DROP
##   ansible.builtin.iptables:
##     chain: FORWARD
##     policy: DROP
##   when: CONFIG.ITEM_FORWARD_POLICY_DROP
#
## - name: Enable VPN NAT Passthru
##   sysctl:
##     name: net.netfilter.nf_conntrack_helper
##     value: '1'
##     sysctl_set: yes
##   when: not CONFIG.ITEM_FORWARD_POLICY_DROP
## 
## - name: Enable net.ipv4.ip_forward
##   sysctl:
##     name: net.ipv4.ip_forward
##     value: '1'
##     sysctl_set: yes
##   when: not CONFIG.ITEM_FORWARD_POLICY_DROP
## 
## - name: Add nf_nat_pptp module
##   lineinfile:
##    path: /etc/modules
##    regexp: '^nf_nat_pptp'
##    line: "nf_nat_pptp"
##   when: not CONFIG.ITEM_FORWARD_POLICY_DROP
## 
## - name: Add nf_conntrack_pptp module
##   lineinfile:
##    path: /etc/modules
##    regexp: '^nf_conntrack_pptp'
##    line: "nf_conntrack_pptp"
##   when: not CONFIG.ITEM_FORWARD_POLICY_DROP

- name: Netfilter persistent save
  ansible.builtin.shell: 
    cmd: netfilter-persistent save
  when: current_inventory_hostname.success

- name: Netfilter persistent reload
  ansible.builtin.shell: 
    cmd: netfilter-persistent reload
  when: current_inventory_hostname.success
